import React, { useEffect, useState } from "react";
import { Helmet } from "react-helmet";
import { FaBookOpen, FaCheckCircle } from "react-icons/fa";

const Admission = () => {
  const [admissions, setAdmissions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [nextPageUrl, setNextPageUrl] = useState(null);
  const [prevPageUrl, setPrevPageUrl] = useState(null);

  const fetchAdmissions = async (url) => {
    setLoading(true);
    setError("");
    try {
      const response = await fetch(url);
      const result = await response.json();
      if (result.results && result.results.length > 0) {
        setAdmissions(result.results);
        setNextPageUrl(result.next);
        setPrevPageUrl(result.previous);
      } else {
        setAdmissions([]);
        setError("ржХрзЛржирзЛ ржнрж░рзНрждрж┐ рждржерзНржп ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!");
      }
    } catch (err) {
      setError("ржбрж╛ржЯрж╛ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ!", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAdmissions("https://server-alpha-fawn.vercel.app/api/v1/admissions/");
  }, []);

  return (
    <section className="max-w-[1144px] w-[95%] mx-auto py-8">
      <Helmet>
        <title>ржнрж░рзНрждрж┐</title>
      </Helmet>
      <br />
      <div className="p-6 rounded-lg shadow-2xl mb-8">
        {/* Section Title */}
        <h3 className="text-2xl font-semibold flex items-center mb-4 text-gray-800">
          <FaBookOpen className="text-blue-500 mr-2" /> ржнрж░рзНрждрж┐ рж╣ржУрзЯрж╛рж░ ржпрзЛржЧрзНржпрждрж╛
        </h3>

        {/* Admission List */}
        <ul className="space-y-3">
          {[
            "ржнрж░рзНрждрж┐ рж╕ржВржХрзНрж░рж╛ржирзНржд ржпрзЗржХрзЛржирзЛ ржмрж┐рж╖рзЯрзЗ ржорж╛ржжрзНрж░рж╛рж╕рж╛рж░ ржХрждрзГржкржХрзНрж╖рзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рзБржиред",
            "ржнрж░рзНрждрж┐ ржлрж░ржо ржУ ржнрж░рзНрждрж┐-рж╕ржВржХрзНрж░рж╛ржирзНржд ржЕржирзНржпрж╛ржирзНржп ржХрж╛ржЧржЬржкрждрзНрж░ ржорж╛ржжрзНрж░рж╛рж╕рж╛рж░ ржЕржлрж┐рж╕ ржерзЗржХрзЗ рж╕ржВржЧрзНрж░рж╣ ржХрж░рждрзЗ рж╣ржмрзЗред",
            "ржирждрзБржи ржЫрж╛рждрзНрж░ржжрзЗрж░ ржнрж░рзНрждрж┐ ржкрж░рзАржХрзНрж╖рж╛рзЯ ржЕржмрж╢рзНржпржЗ ржЙрждрзНрждрзАрж░рзНржг рж╣рждрзЗ рж╣ржмрзЗред",
            "ржнрж░рзНрждрж┐рж░ ржмрж┐рж╖рзЯрзЗ ржХрж░рзНрждрзГржкржХрзНрж╖рзЗрж░ рж╕рж┐ржжрзНржзрж╛ржирзНрждржЗ ржЪрзВрзЬрж╛ржирзНржд ржмрж▓рзЗ ржЧржгрзНржп рж╣ржмрзЗред",
            "ржХрж┐рждрж╛ржм ржмрж┐ржнрж╛ржЧрзЗ рззрзжрзж/- ржЯрж╛ржХрж╛ рж╣рж╛рж░рзЗ ржЖржмрж╛рж╕рж┐ржХ ржлрж┐, рж╣рж┐ржлржЬ/ржирж╛ржЬрзЗрж░рж╛ ржмрж┐ржнрж╛ржЧрзЗ рзкрзжрзж/- ржЯрж╛ржХрж╛ ржПржмржВ ржирзВрж░рж╛ржирзА ржмрж┐ржнрж╛ржЧрзЗ ржЖржмрж╛рж╕рж┐ржХ рзйрзжрзж/- ржЯрж╛ржХрж╛ ржУ ржЕржирж╛ржмрж╛рж╕рж┐ржХ рзирзжрзж/- ржЯрж╛ржХрж╛ ржорж╛рж╕рж┐ржХ ржмрзЗрждржи ржкрж░рж┐рж╢рзЛржз ржХрж░рждрзЗ рж╣ржмрзЗред",
            "рждрж╛рж╣ржлрж┐ржЬрзБрж▓ ржХрзЛрж░ржЖржи ржУ ржирж╛ржЬрзЗрж░рж╛ ржмрж┐ржнрж╛ржЧрзЗ ржХрзЛржЯрж╛ ржкрзВрж░ржг рж╕рж╛ржкрзЗржХрзНрж╖рзЗ ржнрж░рзНрждрж┐ ржЪрж▓ржмрзЗред",
            "ржирждрзБржи ржЫрж╛рждрзНрж░ржжрзЗрж░ ржЬржирзНржорж╕ржиржжрзЗрж░ ржлржЯрзЛржХржкрж┐ ржПржмржВ рж╕ржХрж▓ ржЫрж╛рждрзНрж░рзЗрж░ рзз ржХржкрж┐ ржЫржмрж┐ рж╕рж╛ржерзЗ ржЖржирждрзЗ рж╣ржмрзЗред",
            "ржмрж░рзНржбрж┐ржВрзЯрзЗрж░ ржЦрзЛрж░рж╛ржХрж┐рж░ рзирзжрзжрзж/- ржЯрж╛ржХрж╛ ржкрзНрж░рждрж┐ ржЗржВрж░рзЗржЬрж┐ ржорж╛рж╕рзЗрж░ рзл рждрж╛рж░рж┐ржЦрзЗрж░ ржоржзрзНржпрзЗ ржкрж░рж┐рж╢рзЛржз ржХрж░рждрзЗ рж╣ржмрзЗред",
          ].map((item, index) => (
            <li key={index} className="flex items-center text-gray-700">
              <FaCheckCircle className="text-green-500 mr-2" />
              {item}
            </li>
          ))}
        </ul>
      </div>
      <h2 className="text-2xl font-bold text-center">ржнрж░рзНрждрж┐ рж╕ржВржХрзНрж░рж╛ржирзНржд рждржерзНржп</h2>
      {error && (
        <div className="text-red-800 p-4 rounded mt-4">
          {error}
        </div>
      )}
      {loading ? (
        <div className="text-center text-xl">рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...</div>
      ) : (
        <div className="overflow-x-auto mt-4">
          <table className="table-auto w-full border-collapse">
            <thead>
              <tr className="text-left">
                <th className="border p-5">рж╢рзНрж░рзЗржгрзА</th>
                <th className="border p-5 whitespace-nowrap">ржирждрзБржи ржнрж░рзНрждрж┐ ржлрж┐</th>
                <th className="border p-5 whitespace-nowrap">ржкрзБрж░ржирзЛ ржнрж░рзНрждрж┐ ржлрж┐</th>
                <th className="border p-5 whitespace-nowrap">ржирждрзБржи ржорзЛржЯ ржлрж┐</th>
                <th className="border p-5 whitespace-nowrap">ржкрзБрж░ржирзЛ ржорзЛржЯ ржлрж┐</th>
                <th className="border p-5 whitespace-nowrap">ржЕрждрж┐рж░рж┐ржХрзНржд ржлрж┐</th>
                <th className="border p-5 whitespace-nowrap">ржорж╛рж╕рж┐ржХ ржлрж┐</th>
                <th className="border p-5 whitespace-nowrap">ржнрж░рзНрждрж┐ рж╢рзБрж░рзБ</th>
                <th className="border p-5 whitespace-nowrap">ржнрж░рзНрждрж┐ рж╢рзЗрж╖</th>
                <th className="border p-5 whitespace-nowrap">ржжрж░ржХрж╛рж░рж┐ ржбржХрзБржорзЗржирзНржЯ</th>
                <th className="border p-5 whitespace-nowrap">рж╕рж┐ржЯрзЗрж░ ржЕржмрж╕рзНржерж╛</th>
              </tr>
            </thead>
            <tbody>
              {admissions.map((item) => (
                <tr key={item.id} className=" whitespace-nowrap">
                  <td className="border p-10">{item.ClassName}</td>
                  <td className="border p-10">{item.new_admission_fee} ржЯрж╛ржХрж╛</td>
                  <td className="border p-10">{item.old_admission_fee} ржЯрж╛ржХрж╛</td>
                  <td className="border p-10">{item.new_total_fee} ржЯрж╛ржХрж╛</td>
                  <td className="border p-10">{item.old_total_fee} ржЯрж╛ржХрж╛</td>
                  <td className="border p-10">{item.additional_fee} ржЯрж╛ржХрж╛</td>
                  <td className="border p-10">{item.monthly_fee}</td>
                  <td className="border p-10">{item.admission_start_date}</td>
                  <td className="border p-10">{item.admission_end_date}</td>
                  <td className="border p-10">{item.required_documents}</td>
                  <td className={`border p-10 ${item.seat_availability ? "bg-green-800 text-white" : "bg-red-800 text-white"}`}>
                    {item.seat_availability ? "ржЦрж╛рж▓рж┐ ржЖржЫрзЗ" : "ржЦрж╛рж▓рж┐ ржирзЗржЗ"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Pagination */}
      <div className="flex justify-between mt-8 gap-5">
        {prevPageUrl && (
          <button onClick={() => fetchAdmissions(prevPageUrl)}>ЁЯФЩ ржкрзВрж░рзНржмржмрж░рзНрждрзА ржкрж╛рждрж╛</button>
        )}
        {nextPageUrl && (
          <button onClick={() => fetchAdmissions(nextPageUrl)} className="button1">ржкрж░ржмрж░рзНрждрзА ржкрж╛рждрж╛ тЮбя╕П</button>
        )}
      </div>
    </section>
  );
};

export default Admission;